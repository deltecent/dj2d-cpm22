

                ;
                ;  Morrow Disk Jockey 2D Serial Port
                ;
                ;  PCPUT - This CP/M program sends a file from a CP/M system to a PC
                ;  via a serial The file transfer uses the XMODEM protocol. 
                ;
                ;  Note this program is gutted from the Ward Christenson Modem program.
                ;
                ;  Hacked together by Mike Douglas for the Morrow Disk Jockey 2 serial port
                ;
                ;	Ver	Date	   Desc
                ;   	---    --------    -----------------------------------------------
                ;	1.0    12/24/20    Initial version
                
                ;  Serial Port Equates
                
 E000 =         BASE	EQU	0E000H		;PROM BASE ADDRESS
 E3F9 =         SIOSR	EQU	BASE+3F9H	;SERIAL PORT STATUS REGISTER
 E3F8 =         SIODR	EQU	BASE+3F8H	;SERIAL PORT DATA REGISTER
                
 0008 =         XMTMASK	EQU	08H		;MASK TO ISOLATE XMIT READY BIT
 0000 =         XMTRDY	EQU	00H		;VALUE WHEN READY
 0004 =         RCVMASK	EQU	04H		;MASK TO ISOLATE RECEIVE READY BIT
 0000 =         RCVRDY	EQU	00H		;VALUE WHEN READY
                
 0005 =         ERRLMT	EQU	5		;MAX ALLOWABLE ERRORS
                
                ;DEFINE ASCII CHARACTERS USED
                
 0001 =         SOH	EQU	1
 0004 =         EOT	EQU	4
 0006 =         ACK	EQU	6
 0015 =         NAK	EQU	15H
 0003 =         CTRLC	EQU	3		;Control-C
 000A =         LF	EQU	10
 000D =         CR	EQU	13
                
 0100           	org	100h
                
                ;  Verify a file name was specified
                
 0100 3A5D00    	lda	PARAM1		;A=1st character of parameter 1
 0103 FE20      	cpi	' '		;make sure file name present
 0105 C21101    	jnz	haveFn		;yes, have a file name
                
 0108 11FB02    	lxi	d,mHelp		;display usage message
 010B 0E09      	mvi	c,PRINT
 010D CD0500    	call	BDOS
 0110 C9        	ret			;return to CPM
                
 0111 210000    haveFn	LXI	H,0		;HL=0
 0114 39        	DAD	SP		;HL=STACK FROM CP/M
 0115 22DA03    	SHLD	STACK		;..SAVE IT
 0118 31DA03    	LXI	SP,STACK	;SP=MY STACK
                
 011B AF        	xra	a		
 011C 32DC03    	sta	SECTNO		;initialize sector number to zero
                
 011F CDB801    	CALL	OPEN$FILE	;OPEN THE FILE
                
 0122 119103    	lxi	d,mRcv		;DE->prompt to receive file
 0125 0E09      	MVI	C,PRINT
 0127 CD0500    	CALL	BDOS
                
                ;  GOBBLE UP GARBAGE CHARS FROM THE LINE
                
 012A 0601      purge	MVI	B,1		;times out after 1 second if no data
 012C CDE401    	CALL	RECV
 012F DA3A01    	jc	lineClr		;line is clear, go wait for initial NAK
                
 0132 FE03      	cpi	CTRLC		;exit if abort requested
 0134 CAC202    	jz	abort
                
 0137 C32A01    	jmp	purge
                
                ; WAIT FOR INITIAL NAK, THEN SEND THE FILE
                	
 013A AF        lineClr	xra	a		;clear crc flag = checksum mode
 013B 32DE03    	sta	crcFlag
                
 013E 0601      WAITNAK	MVI	B,1		;TIMEOUT DELAY
 0140 CDE401    	CALL	RECV
 0143 DA3E01    	JC	WAITNAK
                
 0146 FE03      	cpi	CTRLC		;abort requested?
 0148 CAC202    	jz	abort
                
 014B FE15      	CPI	NAK		;NAK RECEIVED?
 014D CA5801    	jz	SENDB		;yes, send file in checksum mode
                
 0150 FE43      	cpi	'C'		;'C' for CRC mode received?
 0152 C23E01    	JNZ	WAITNAK		;no, keep waiting
                
 0155 32DE03    	sta	crcFlag		;set CRC flag non-zero = true
                				;fall through to start the send operation
                ;
                ;*****************SEND A FILE***************
                ;
                
                ;READ SECTOR, SEND IT
                
 0158 CD2402    SENDB	CALL	READ$SECTOR
 015B 3ADC03    	LDA	SECTNO		;INCR SECT NO.
 015E 3C        	INR	A
 015F 32DC03    	STA	SECTNO
                
                ;SEND OR REPEAT SECTOR
                
 0162 3E01      REPTB	MVI	A,SOH
 0164 CD1002    	CALL	SEND
                
 0167 3ADC03    	LDA	SECTNO
 016A CD1002    	CALL	SEND
                
 016D 3ADC03    	LDA	SECTNO
 0170 2F        	CMA
 0171 CD1002    	CALL	SEND
                
 0174 210000    	lxi	h,0		;init crc to zero
 0177 22DF03    	shld	crc16
 017A 4C        	mov	c,h		;init checksum in c to zero
 017B 218000    	LXI	H,80H
                
 017E 7E        SENDC	MOV	A,M
 017F CD1002    	CALL	SEND
 0182 CDDB02    	call	calCrc		;update CRC
 0185 23        	INX	H
 0186 7C        	MOV	A,H
 0187 FE01      	CPI	1		;DONE WITH SECTOR?
 0189 C27E01    	JNZ	SENDC
                
                ; Send checksum or CRC based on crcFlag
                
 018C 3ADE03    	lda	crcFlag		;crc or checksum?
 018F B7        	ora	a
 0190 CA9F01    	jz	sndCsum		;flag clear = checksum
                
 0193 3AE003    	lda	crc16+1		;a=high byte of CRC
 0196 CD1002    	call	SEND		;send it
 0199 3ADF03    	lda	crc16		;a=low byte of crc
 019C C3A001    	jmp	sndSkip		;skip next instruction	
                
 019F 79        sndCsum	mov	a,c		;send the checksum byte
                
 01A0 CD1002    sndSkip	call	SEND
                
                ;GET ACK ON SECTOR
                
 01A3 0604      	MVI	B,4		;WAIT 4 SECONDS MAX
 01A5 CDE401    	CALL	RECV
 01A8 DA6201    	JC	REPTB		;TIMEOUT, SEND AGAIN
                
                ;NO TIMEOUT SENDING SECTOR
                
 01AB FE06      	CPI	ACK		;ACK RECIEVED?
 01AD CA5801    	JZ	SENDB		;..YES, SEND NEXT SECT
                
 01B0 FE03      	cpi	ctrlc		;control-c to abort?
 01B2 CAC202    	jz	abort
                
 01B5 C36201    	JMP	REPTB		;PROBABLY NAK - TRY AGAIN
                ;
                ;
                ; S U B R O U T I N E S
                ;
                ;OPEN FILE
 01B8 115C00    OPEN$FILE LXI	D,FCB
 01BB 0E0F      	MVI	C,OPEN
 01BD CD0500    	CALL	BDOS
 01C0 3C        	INR	A		;OPEN OK?
 01C1 C0        	RNZ			;GOOD OPEN
                
 01C2 CDD901    	CALL	ERXIT
 01C5 0D0A43616E	DB	CR,LF,'Can''t Open File',CR,LF,'$'
                
                ; - - - - - - - - - - - - - - -
                ;EXIT PRINTING MESSAGE FOLLOWING 'CALL ERXIT'
 01D9 D1        ERXIT	POP	D		;GET MESSAGE
 01DA 0E09      	MVI	C,PRINT
 01DC CD0500    	CALL	BDOS		;PRINT MESSAGE
                
 01DF 2ADA03    	LHLD	STACK		;GET ORIGINAL STACK
 01E2 F9        	SPHL			;RESTORE IT
 01E3 C9        	RET			;--EXIT-- TO CP/M
                
                ; - - - - - - - - - - - - - - -
                ;MODEM RECV
                ;-------------------------------------
 01E4 D5        RECV	PUSH	D		;SAVE
 01E5 110076    MSEC	lxi	d,(118 shl 8)	;66 cycles, 8.448ms/wrap*118=1s (2MHz)
                
 01E8 3AF9E3    MWTI	lda	SIOSR		;(13) character received?
 01EB E604      	ANI	RCVMASK		;(7)
 01ED FE00      	CPI	RCVRDY		;(7)
 01EF CA0502    	JZ	MCHAR		;(10) GOT CHAR
                
                ; no character present, decrement timeout
                
 01F2 FE00      	cpi	0		;(7) waste some time
 01F4 FE00      	cpi	0		;(7) waste some time
 01F6 1D        	DCR	E		;(5) COUNT DOWN
 01F7 C2E801    	JNZ	MWTI		;(10) FOR TIMEOUT
                
 01FA 15        	DCR	D		;do msb every 256th time
 01FB C2E801    	JNZ	MWTI
                
 01FE 05        	DCR	B		;DCR # OF SECONDS
 01FF C2E501    	JNZ	MSEC
                
                ;MODEM TIMED OUT RECEIVING
                
 0202 D1        	POP	D		;RESTORE D,E
 0203 37        	STC			;CARRY SHOWS TIMEOUT
 0204 C9        	RET
                
                ;GOT MODEM CHAR
                
 0205 3AF8E3    MCHAR	lda	SIODR		;A=character received
 0208 2F        	cma			;data was inverted
 0209 D1        	POP	D		;RESTORE DE
 020A F5        	PUSH	PSW		;CALC CHECKSUM
 020B 81        	ADD	C
 020C 4F        	MOV	C,A
 020D F1        	POP	PSW
 020E B7        	ORA	A		;TURN OFF CARRY TO SHOW NO TIMEOUT
 020F C9        	RET
                
                ; - - - - - - - - - - - - - - -
                ;MODEM SEND CHAR ROUTINE
                ;----------------------------------
 0210 F5        SEND	PUSH	PSW		;CHECK IF MONITORING OUTPUT
 0211 81        	ADD	C		;CALC CKSUM
 0212 4F        	MOV	C,A
                
 0213 3AF9E3    SENDW	lda	SIOSR		;ok to transmit?
 0216 E608      	ANI	XMTMASK
 0218 FE00      	CPI	XMTRDY
 021A C21302    	JNZ	SENDW
                
 021D F1        	POP	PSW		;GET CHAR
 021E 2F        	cma			;convert to negative data
 021F 32F8E3    	sta	SIODR		;send the character
 0222 2F        	cma			;restore original value
 0223 C9        	RET
                
                ; - - - - - - - - - - - - - - -
                ;FILE READ ROUTINE
                ;----------------------------------
                READ$SECTOR:
 0224 115C00    	LXI	D,FCB
 0227 0E14      	MVI	C,READ
 0229 CD0500    	CALL	BDOS
 022C B7        	ORA	A
 022D C8        	RZ
                
 022E 3D        	DCR	A		;EOF?
 022F C29102    	JNZ	RDERR
                
                ;EOF
                
 0232 AF        	XRA	A
 0233 32DD03    	STA	ERRCT
                
 0236 3E04      SEOT	MVI	A,EOT
 0238 CD1002    	CALL	SEND
 023B 0603      	MVI	B,3		;WAIT 3 SEC FOR TIMEOUT
 023D CDE401    	CALL	RECV
 0240 DA8E02    	JC	EOTTOT		;EOT TIMEOUT
                
 0243 FE06      	CPI	ACK
 0245 CAA802    	JZ	XFER$CPLT
                
                ;ACK NOT RECIEVED
                
 0248 3ADD03    EOTERR	LDA	ERRCT
 024B 3C        	INR	A
 024C 32DD03    	STA	ERRCT
 024F FE05      	CPI	ERRLMT
 0251 DA3602    	JC	SEOT
                
 0254 CDD901    	CALL	ERXIT
 0257 0D0A0A    	db	CR,LF,LF
 025A 4E6F204143	db	'No ACK received on EOT, but transfer is complete.',CR,LF,'$'
                
                ;
                ;TIMEOUT ON EOT
                ;
 028E C34802    EOTTOT	JMP	EOTERR
                ;
                ;READ ERROR
                ;
 0291 CDD901    RDERR	CALL	ERXIT
 0294 0D0A46696C	DB	CR,LF,'File Read Error',CR,LF,'$'
                
                ;DONE - CLOSE UP SHOP
                
                XFER$CPLT:
 02A8 CDD901    	CALL	ERXIT
 02AB 0D0A0A5472	DB	CR,LF,LF,'Transfer Complete',CR,LF,'$'
                
 02C2 CDD901    abort	call	erxit
 02C5 0D0A0A5472	DB	CR,LF,LF,'Transfer Aborted',CR,LF,'$'
                
                ;-----------------------------------------------------------------------------
                ; calCrc - update the 16-bit CRC with one more byte. 
                ;    (Copied from M. Eberhard)
                ; On Entry:
                ;   a has the new byte
                ;   crc16 is current except this byte
                ; On Exit:
                ;   crc16 has been updated
                ;   Trashes a,de
                ;-----------------------------------------------------------------------------
 02DB C5        calCrc	push	b		;save bc, hl
 02DC E5        	push	h
 02DD 2ADF03    	lhld	crc16		;get CRC so far
 02E0 AC        	xra	h		;XOR into CRC top byte
 02E1 67        	mov	h,a
 02E2 012110    	lxi	b,1021h		;bc=CRC16 polynomial
 02E5 1608      	mvi	d,8		;prepare to rotate 8 bits
                
                ; do 8 bit shift/divide by CRC polynomial
                
 02E7 29        cRotLp	dad	h		;16-bit shift
 02E8 D2F102    	jnc	cClr		;skip if bit 15 was 0
                
 02EB 7C        	mov	a,h		;CRC=CRC xor 1021H
 02EC A8        	xra	b
 02ED 67        	mov	h,a
 02EE 7D        	mov	a,l
 02EF A9        	xra	c
 02F0 6F        	mov	l,a
                
 02F1 15        cClr	dcr	d
 02F2 C2E702    	jnz	cRotLp		;rotate 8 times
                
                ; save the updated CRC and exit
                
 02F5 22DF03    	shld	crc16		;save updated CRC
 02F8 E1        	pop	h		;restore hl, bc
 02F9 C1        	pop	b
 02FA C9        	ret
                
                ;-----------------------------------------
                ;  messages
                ;-----------------------------------------
 02FB 0D0A      mHelp	db	CR,LF
 02FD 5043505554	db	'PCPUT ver 1.0 for Disk Jockey 2D Serial Port',CR,LF
 032B 0A        	db	LF
 032C 5472616E73	db	'Transmits a file to a PC through a serial port',CR,LF
 035C 7573696E67	db	'using the XMODEM protocol.',CR,LF
 0378 0A        	db	LF
 0379 5573616765	db	'Usage: PCPUT file.ext',CR,LF,'$'
                
 0391 5374617274mRcv	db	'Start XMODEM file receive now...$'
                
                ; Data Area
                
 03B2           	DS	40	;STACK AREA
 03DA           STACK	DS	2	;STACK POINTER
 03DC           SECTNO	DS	1	;CURRENT SECTOR NUMBER 
 03DD           ERRCT	DS	1	;ERROR COUNT
 03DE           crcFlag	ds	1	;non-zero if using CRC
 03DF           crc16	ds	2	;computed crc
                
                ;
                ; BDOS EQUATES (VERSION 2)
                ;
 0001 =         RDCON	EQU	1
 0002 =         WRCON	EQU	2
 0009 =         PRINT	EQU	9
 000B =         CONST	EQU	11	;CONSOLE STAT
 000F =         OPEN	EQU	15	;0FFH=NOT FOUND
 0010 =         CLOSE	EQU	16	;   "	"
 0011 =         SRCHF	EQU	17	;   "	"
 0012 =         SRCHN	EQU	18	;   "	"
 0013 =         ERASE	EQU	19	;NO RET CODE
 0014 =         READ	EQU	20	;0=OK, 1=EOF
 0015 =         WRITE	EQU	21	;0=OK, 1=ERR, 2=?, 0FFH=NO DIR SPC
 0016 =         MAKE	EQU	22	;0FFH=BAD
 0017 =         REN	EQU	23	;0FFH=BAD
 001A =         STDMA	EQU	26
 0005 =         BDOS	EQU	5
 0000 =         REIPL	EQU	0
 005C =         FCB	EQU	5CH	;SYSTEM FCB
 005D =         PARAM1	EQU	FCB+1	;COMMAND LINE PARAMETER 1 IN FCB
 006D =         PARAM2	EQU	PARAM1+16	;COMMAND LINE PARAMETER 2
 03E1           	END
